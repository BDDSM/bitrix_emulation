//Парсинг каталога товаров CommerceML. Желателен формат 2.05 - 2.08, на более старых может сбоить.

//Обновления здесь:
//https://github.com/volodkindv/CMLReader


//заглушка для ленивых
Функция ПолучитьСписокXDTO(Объект)
	Результат = Объект;
	Если ТипЗнч(Объект) = Тип("ОбъектXDTO") Тогда
		Результат = Новый Массив;
		Результат.Добавить(Объект);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//точка входа для парсинга файла (одного файла! Пока что не каталога!)
Функция РазобратьXMLВТаблицыЗначений(ИмяФайла) Экспорт
	
	Результат = Новый Структура;
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайла);
	
	Объект = ФабрикаXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();
	
	//цены и остатки грузятся из файлов offers*.xml, это потом.
	//А вот штрихкоды лежат тоже в offers.xml
	//И еще каталог может быть раскидан на несколько файлов. 
	//Но в этом случае можно просто в низкоуровневые методы передавать объекты из разных файлов.
	

	//1. Инициализация таблиц
	ИнициализироватьТаблицы(Результат);
	
	//2.Собственно чтение
	
	xmlПрочитатьСписокДопСвойств(Объект,Результат);
	
	Если Не Объект.Свойства().Получить("Классификатор")=Неопределено Тогда
		xmlДобавитьГруппыВДеревоРекурсивно(Объект.Классификатор.Группы,Результат.Каталоги);
	КонецЕсли;
	
	xmlПрочитатьТаблицуТоваров(Объект,Результат);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицыИзОбъектаXDTO(Таблицы,Объект)
	
КонецПроцедуры

//читает "КоммерческаяИнформация - Классификатор - Свойства" вместе с допустимыми значениями
Процедура xmlПрочитатьСписокДопСвойств(Объект,Таблицы)
	
	Если Объект.Свойства().Получить("Классификатор")=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	СтруктураДопПолей	= Таблицы.СтруктураДопПолей;
	ЗначенияДопПолей	= Таблицы.ЗначенияДопПолей;
	
	Если Объект.Классификатор.Свойства().Получить("Свойства")=Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Сч = 0;
	Для Каждого ОписаниеПоля Из ПолучитьСписокXDTO(Объект.Классификатор.Свойства.Свойство) Цикл
		Сч = Сч+1;
		НовПоле = СтруктураДопПолей.Добавить();
		НовПоле.ВнутреннееИмя	= "AdditionalField_"+СтрЗаменить(Строка(ОписаниеПоля.ИД),"-","_");
		НовПоле.Представление	= ОписаниеПоля.Наименование;
		
		Если ОписаниеПоля.ТипЗначений = "Справочник" Тогда
			
			//пропустим свойства, у которых не указан список
			Если НЕ ОписаниеПоля.Свойства().Получить("ВариантыЗначений")=Неопределено 
				И НЕ ОписаниеПоля.ВариантыЗначений.Свойства().Получить("Справочник")=Неопределено Тогда
				
				Для Каждого ВариантЗначения Из ПолучитьСписокXDTO(ОписаниеПоля.ВариантыЗначений.Справочник) Цикл
					НовВариантЗначения = ЗначенияДопПолей.Добавить();
					НовВариантЗначения.ИДСвойства	= ОписаниеПоля.ИД;
					НовВариантЗначения.ИДЗначения	= ВариантЗначения.ИДЗначения;
					НовВариантЗначения.Значение		= ВариантЗначения.Значение;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначенияДопПолей.Индексы.Добавить("ИДСвойства,ИДЗначения");
	
	//все доп.поля допишем прямо в таблицу товаров как колонки
	ТипСтрока100 = Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная));
	Для Каждого ОписаниеДополнительногоПоля Из Таблицы.СтруктураДопПолей Цикл
		Таблицы.ТаблицаТоваров.Колонки.Добавить(ОписаниеДополнительногоПоля.ВнутреннееИмя,ТипСтрока100,ОписаниеДополнительногоПоля.Представление);//в будущем можно типизировать
	КонецЦикла;
	
КонецПроцедуры

//читает "КоммерческаяИнформация - Каталог - Товары", т.е. собственно товары
Процедура xmlПрочитатьТаблицуТоваров(Объект,Таблицы)
	
	СтруктураДопПолей	= Таблицы.СтруктураДопПолей;
	ЗначенияДопПолей	= Таблицы.ЗначенияДопПолей;
	ТаблицаТоваров		= Таблицы.ТаблицаТоваров;
	
	Для Каждого ТоварXDTO Из ПолучитьСписокXDTO(Объект.Каталог.Товары.Товар) Цикл
		
		ДоступныеСвойстваТекущегоТовара = ТоварXDTO.Свойства();
		
		НовСтрокаСправочника = ТаблицаТоваров.Добавить();
		
		НовСтрокаСправочника.Код					= ТоварXDTO.Ид;
		//В разных типовых конфигурациях код то выгружается, то не выгружается.
		//Если кода нет, то будем вместо него использовать ID.
		
		НовСтрокаСправочника.Наименование			= ТоварXDTO.Наименование;
		
		Если Объект.ВерсияСхемы = "2.05" Тогда
			НовСтрокаСправочника.БазоваяЕдиница			= ТоварXDTO.БазоваяЕдиница.Код;
		Иначе	
			НовСтрокаСправочника.БазоваяЕдиница			= ТоварXDTO.БазоваяЕдиница;
		КонецЕсли;	
		
		Если Не ДоступныеСвойстваТекущегоТовара.Получить("СтавкиНалогов")=Неопределено Тогда
			Для Каждого Ставка Из ПолучитьСписокXDTO(ТоварXDTO.СтавкиНалогов.СтавкаНалога) Цикл
				Если Ставка.Наименование = "НДС" Тогда
					НовСтрокаСправочника.СтавкаНДС				= ПолучитьСвойствоXDTO(Ставка, "Ставка");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Не ДоступныеСвойстваТекущегоТовара.Получить("Группы")=Неопределено Тогда
			НовСтрокаСправочника.Группа				= ТоварXDTO.Группы.Ид;
		КонецЕсли;
		
		Если НЕ ТоварXDTO.Свойства().Получить("ЗначенияРеквизитов")=Неопределено Тогда
			Для Каждого ЗначениеРеквизита Из ПолучитьСписокXDTO(ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита) Цикл
				
				_Значение = ПолучитьСвойствоXDTO(ЗначениеРеквизита,"Значение");
				Если ЗначениеРеквизита.Наименование = "Полное наименование" Тогда
					НовСтрокаСправочника.ПолноеНаименование				= _Значение;
				ИначеЕсли ЗначениеРеквизита.Наименование = "Вес" Тогда
					НовСтрокаСправочника.Вес							= _Значение;
				ИначеЕсли ЗначениеРеквизита.Наименование = "Код" Тогда
					НовСтрокаСправочника.Код							= _Значение;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ДоступныеСвойстваТекущегоТовара.Получить("Артикул")=Неопределено Тогда
			Если ТипЗнч(ТоварXDTO.Артикул)=Тип("Строка") Тогда//костыль, увы
				НовСтрокаСправочника.Артикул				= ТоварXDTO.Артикул;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДоступныеСвойстваТекущегоТовара.Получить("Штрихкод")=Неопределено Тогда
			Если ТипЗнч(ТоварXDTO.Штрихкод)=Тип("Строка") Тогда//костыль, увы
				НовСтрокаСправочника.Штрихкод = ТоварXDTO.Штрихкод;
			КонецЕсли;
		КонецЕсли;
		
		_ЗначенияСвойств = ПолучитьСвойствоXDTO(ТоварXDTO,"ЗначенияСвойств");
		Если НЕ _ЗначенияСвойств=Неопределено Тогда
			Для Каждого ДопСвойство Из ПолучитьСписокXDTO(ТоварXDTO.ЗначенияСвойств.ЗначенияСвойства) Цикл
				СтрокиЗначенийСвойств = ЗначенияДопПолей.НайтиСтроки(Новый Структура("ИДСвойства,ИДЗначения",ДопСвойство.ИД,ДопСвойство.Значение));
				Если СтрокиЗначенийСвойств.Количество()=1 Тогда
					НовСтрокаСправочника["AdditionalField_"+СтрЗаменить(ДопСвойство.ИД,"-","_")] = СтрокиЗначенийСвойств[0].Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//читает "КоммерческаяИнформация - Классификатор - Группы", т.е. структуру папок
Процедура xmlДобавитьГруппыВДеревоРекурсивно(ПозицияXDTO,СтрокаДерева)
	
	Если ПозицияXDTO.Свойства().Получить("Группа")=Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	Для Каждого _Поз Из ПолучитьСписокXDTO(ПозицияXDTO.Группа) Цикл
		
		НовСтрока = СтрокаДерева.Строки.Добавить();
		НовСтрока.ID			= _Поз.Ид;
		НовСтрока.Наименование	= _Поз.Наименование;
	
		Если НЕ _Поз.Свойства().Получить("Группы")=Неопределено Тогда
			xmlДобавитьГруппыВДеревоРекурсивно(_Поз.Группы,НовСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//готовит таблицы/деревья, в которые будет развернуто содержимое XML
Процедура ИнициализироватьТаблицы(Таблицы)
	
	ТипСтрока36 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36));
	
	СтруктураДопПолей = Новый ТаблицаЗначений;
	СтруктураДопПолей.Колонки.Добавить("ВнутреннееИмя");
	СтруктураДопПолей.Колонки.Добавить("Представление");
	
	ЗначенияДопПолей = Новый ТаблицаЗначений;
	ЗначенияДопПолей.Колонки.Добавить("ИДСвойства",	ТипСтрока36);
	ЗначенияДопПолей.Колонки.Добавить("ИДЗначения",	ТипСтрока36);
	ЗначенияДопПолей.Колонки.Добавить("Значение");
	
	ТаблицаТоваров = ИнициализироватьТаблицуДляЗагрузкиКаталога();
	
	Каталоги = Новый ДеревоЗначений;
	Каталоги.Колонки.Добавить("ID",				ТипСтрока36);
	Каталоги.Колонки.Добавить("Наименование",	ТипСтрока36);
	
	Таблицы.Вставить("ТаблицаТоваров",		ТаблицаТоваров);
	Таблицы.Вставить("СтруктураДопПолей",	СтруктураДопПолей);
	Таблицы.Вставить("ЗначенияДопПолей",	ЗначенияДопПолей);
	Таблицы.Вставить("Каталоги",			Каталоги);
	
КонецПроцедуры

//остаток из старого проекта
Функция ИнициализироватьТаблицуДляЗагрузкиКаталога()
	
	//ДлинаКода = Метаданные.Справочники.Товары.ДлинаКода;
	ДлинаКода = 50;
	
	ТипСтрокаПоУмолчанию = Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная);
	ТипСтрока36 = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код",					Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(ДлинаКода,ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("Группа",				ТипСтрока36);
	Результат.Колонки.Добавить("Наименование",			Новый ОписаниеТипов("Строка",,ТипСтрокаПоУмолчанию));
	Результат.Колонки.Добавить("ПолноеНаименование",	Новый ОписаниеТипов("Строка",,ТипСтрокаПоУмолчанию));
	Результат.Колонки.Добавить("БазоваяЕдиница",		Новый ОписаниеТипов("Строка",,ТипСтрокаПоУмолчанию));
	Результат.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("Строка",,ТипСтрокаПоУмолчанию));
	Результат.Колонки.Добавить("Артикул",				Новый ОписаниеТипов("Строка",,ТипСтрокаПоУмолчанию));
	Результат.Колонки.Добавить("Штрихкод",				Новый ОписаниеТипов("Строка",,ТипСтрокаПоУмолчанию));
	Результат.Колонки.Добавить("Вес",					Новый ОписаниеТипов("Число"));
	
	Результат.Индексы.Добавить("Код,Группа");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойствоXDTO(ТекущийУзел,ИмяСвойства)
	
	Если Не ТекущийУзел.Свойства().Получить(ИмяСвойства)=Неопределено Тогда
		Возврат ТекущийУзел[ИмяСвойства];
	КонецЕсли;	
	
КонецФункции	


Процедура СоздатьТовары(СтрокиТоваров) Экспорт
	
	//простейшая проверка: по артикулам
	ЗапросПоАртикулам = Новый Запрос(
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Артикул
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул В(&П)"
	);
	
	МассивАртикулов = Новый Массив;
	Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
		МассивАртикулов.Добавить(СтрокаТовара.Артикул);
	КонецЦикла;	
	
	ЗапросПоАртикулам.УстановитьПараметр("П", МассивАртикулов);
	
	ЗагруженныеТовары = ЗапросПоАртикулам.Выполнить().Выгрузить().ВыгрузитьКолонку("Артикул");
	
	Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
		
		Если ЗагруженныеТовары.Найти(СтрокаТовара.Артикул)=Неопределено Тогда
			
			//разумеется, строки с пустыми артикулами будут создаваться никогда
			СоздатьТовар(СтрокаТовара);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Создает и записывает единичный элемент справочника "Номенклатура"
//Пример для УТ 10.3 и подобных: УПП, КА.
Процедура СоздатьТовар(Параметры)
	
	НачатьТранзакцию();
	Попытка
		
		Элемент = Справочники.Номенклатура.СоздатьЭлемент();
		
		Элемент.Наименование				= Параметры.Наименование;
		Элемент.НаименованиеПолное			= Параметры.ПолноеНаименование;
		Элемент.Артикул						= Параметры.Артикул;
		Элемент.ВидНоменклатуры				= Справочники.ВидыНоменклатуры.НайтиПоКоду("000000001");
		Элемент.БазоваяЕдиницаИзмерения		= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Параметры.БазоваяЕдиница);
		Элемент.СтавкаНДС					= мСтавкаНДС(Параметры.СтавкаНДС);
		
		//......
		
		Элемент.УстановитьНовыйКод();
		Элемент.Записать();
		
		НоваяЕдиница = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		
		НоваяЕдиница.Владелец = Элемент.Ссылка;
		НоваяЕдиница.Коэффициент = 1;
		НоваяЕдиница.ЕдиницаПоКлассификатору = Элемент.БазоваяЕдиницаИзмерения;
		НоваяЕдиница.Наименование = Элемент.БазоваяЕдиницаИзмерения.Наименование;
		НоваяЕдиница.УстановитьНовыйКод();
		НоваяЕдиница.Записать();
		
		Элемент.ЕдиницаХраненияОстатков = НоваяЕдиница.Ссылка;
		Элемент.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		_Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		Сообщить("Не загружен товар с кодом "+Параметры.Код+" по причине: "+Символы.ПС+_Ошибка);
		//ВызватьИсключение _Ошибка;
		
	КонецПопытки;
	
КонецПроцедуры

Функция мСтавкаНДС(СтавкаСтрокой)
	
	Если СтавкаСтрокой="10" Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли СтавкаСтрокой="18" Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли СтавкаСтрокой="БезНДС" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецФункции
